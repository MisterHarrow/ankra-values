# Helm values for Open WebUI, applied by Ankra/ArgoCD.
# This file is the single source of truth for our overrides.

# 1. Disable sub-charts that are not needed.
# We run a separate, standalone Ollama service. The Pipelines feature
# is not required and forces an unwanted dependency on the embedded Ollama.
ollama:
  enabled: false
pipelines:
  enabled: false

# 2. Explicitly provide the URL for our standalone Ollama service.
# The chart will automatically create the required OLLAMA_BASE_URLS env var from this value.
ollamaUrls:
  - "http://ollama:11434"

# 3. Configure OpenLIT and other necessary environment variables.
extraEnvVars:
  # Adds the shared volume to Python's path to find the openlit package.
  - name: PYTHONPATH
    value: "/app/backend/packages"
  # Disable Open WebUI's built-in OpenTelemetry (we use OpenLIT instead)
  - name: ENABLE_OTEL
    value: "false"
  # OpenLIT configuration
  - name: OPENLIT_APPLICATION_NAME
    value: "open-webui"
  - name: OPENLIT_ENVIRONMENT
    value: "production"
  - name: OTEL_EXPORTER_OTLP_ENDPOINT
    value: "http://otel-collector:4317"
  - name: OTEL_EXPORTER_OTLP_INSECURE
    value: "true"
  - name: OTEL_METRIC_EXPORT_INTERVAL
    value: "5000"
  # Default API key for pipelines.
  - name: OPENAI_API_KEY
    value: "0p3n-w3bu!"

# 4. Override the container startup command to use OpenLIT.
# This initializes OpenLIT instrumentation and then starts the server normally.
image:
  repository: ghcr.io/open-webui/open-webui
  tag: ""
  pullPolicy: "IfNotPresent"

# Use the command override at the root level instead of in image section
command: ["/bin/sh", "-c", "python -c 'import openlit; from openlit.instrumentation.ollama import OllamaInstrumentor; from openlit.instrumentation.openai import OpenAIInstrumentor; openlit.init(); OllamaInstrumentor().instrument(); OpenAIInstrumentor().instrument(); print(\"OpenLIT instrumentation enabled\")' && exec bash start.sh"]

# 5. Add an initContainer to install the openlit package into a shared volume.
extraInitContainers:
  - name: install-openlit
    image: ghcr.io/open-webui/open-webui:main
    command: ["/bin/sh", "-c", "pip install --target=/app/backend/packages openlit && echo 'OpenLIT installed'"]
    volumeMounts:
      - name: packages
        mountPath: /app/backend/packages

# 6. Define the shared volume and mount it in the main container.
# This temporary volume is shared between the initContainer and the main container.
volumes:
  - name: packages
    emptyDir: {}
volumeMounts:
  container:
    - name: packages
      mountPath: /app/backend/packages

# 7. Increase persistent volume size for RAG file staging.
# As noted in the project README, a larger volume is needed to prevent
# "no space left on device" errors during document ingestion.
persistence:
  enabled: true
  size: 20Gi

# --- All other values will use the chart's defaults ---

nameOverride: ""
namespaceOverride: ""

tika:
  # -- Automatically install Apache Tika to extend Open WebUI
  enabled: false

# -- Disables taking Ollama Urls from `ollamaUrls`  list
ollamaUrlsFromExtraEnv: false

websocket:
  # -- Enables websocket support in Open WebUI with env `ENABLE_WEBSOCKET_SUPPORT`
  enabled: false
  # -- Specifies the websocket manager to use with env `WEBSOCKET_MANAGER`: redis (default)
  manager: redis
  # -- Specifies the URL of the Redis instance for websocket communication. Template with `redis://[:<password>@]<hostname>:<port>/<db>`
  url: redis://open-webui-redis:6379/0
  # -- Node selector for websocket pods
  nodeSelector: {}
  # -- Deploys a redis
  redis:
    # -- Enable redis installation
    enabled: true
    # -- Redis name
    name: open-webui-redis
    # -- Redis labels
    labels: {}
    # -- Redis annotations
    annotations: {}
    # -- Redis pod
    pods:
      # -- Redis pod labels
      labels: {}
      # -- Redis pod annotations
      annotations: {}
    # -- Redis image
    image:
      repository: redis
      tag: 7.4.2-alpine3.21
      pullPolicy: IfNotPresent
    # -- Redis command (overrides default)
    command: []
    # -- Redis arguments (overrides default)
    args: []
    # -- Redis resources
    resources: {}
    # -- Redis service
    service:
      # -- Redis container/target port
      containerPort: 6379
      # -- Redis service type
      type: ClusterIP
      # -- Redis service labels
      labels: {}
      # -- Redis service annotations
      annotations: {}
      # -- Redis service port
      port: 6379
      # -- Redis service node port. Valid only when type is `NodePort`
      nodePort: ""
    # -- Redis tolerations for pod assignment
    tolerations: []

    # -- Redis affinity for pod assignment
    affinity: {}

    # -- Redis security context
    securityContext:
      {}
      # runAsUser: 999
      # runAsGroup: 1000

# -- Deploys a Redis cluster with subchart 'redis' from bitnami
redis-cluster:
  # -- Enable Redis installation
  enabled: false
  # -- Redis cluster name (recommended to be 'open-webui-redis')
  # - In this case, redis url will be 'redis://open-webui-redis-master:6379/0' or 'redis://[:<password>@]open-webui-redis-master:6379/0'
  fullnameOverride: open-webui-redis
  # -- Redis Authentication
  auth:
    # -- Enable Redis authentication (disabled by default). For your security, we strongly suggest that you switch to 'auth.enabled=true'
    enabled: false
  # -- Replica configuration for the Redis cluster
  replica:
    # -- Number of Redis replica instances
    replicaCount: 3

# -- Value of cluster domain
clusterDomain: cluster.local

annotations: {}
podAnnotations: {}
podLabels: {}
replicaCount: 1
# -- Strategy for updating the workload manager: deployment or statefulset
strategy: {}

serviceAccount:
  enable: true
  name: ""
  annotations: {}
  automountServiceAccountToken: false

# -- Configure imagePullSecrets to use private registry
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry>
imagePullSecrets: []
# imagePullSecrets:
# - name: myRegistryKeySecretName

# -- Probe for liveness of the Open WebUI container
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
livenessProbe: {}
# livenessProbe:
#   httpGet:
#     path: /health
#     port: http
#   failureThreshold: 1
#   periodSeconds: 10

# -- Probe for readiness of the Open WebUI container
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
readinessProbe: {}
# readinessProbe:
#   httpGet:
#     path: /health/db
#     port: http
#   failureThreshold: 1
#   periodSeconds: 10

# -- Probe for startup of the Open WebUI container
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes>
startupProbe: {}
# startupProbe:
#   httpGet:
#     path: /health
#     port: http
#   initialDelaySeconds: 30
#   periodSeconds: 5
#   failureThreshold: 20

resources: {}

copyAppData:
  resources: {}

managedCertificate:
  enabled: false
  name: "mydomain-chat-cert" # You can override this name if needed
  domains:
    - chat.example.com # update to your real domain

ingress:
  enabled: false
  class: ""
  # -- Use appropriate annotations for your Ingress controller, e.g., for NGINX:
  annotations: {}
  #   # Example for GKE Ingress
  #   kubernetes.io/ingress.class: "gce"
  #   kubernetes.io/ingress.global-static-ip-name: "open-webui-external-ip"   #  you need to create this address in GCP console
  #   # Force HTTP to redirect to HTTPS
  #   nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  #   nginx.ingress.kubernetes.io/ssl-redirect: "true"
  #   nginx.ingress.kubernetes.io/permanent-redirect: "https://chat.example.com"
  #   networking.gke.io/managed-certificates: "mydomain-chat-cert"
  #   # nginx.ingress.kubernetes.io/rewrite-target: /
  host: "chat.example.com" # update to your real domain
  additionalHosts: []
  tls: false
  existingSecret: ""

  # -- Additional custom labels to add to the Ingress metadata
  # Useful for tagging, selecting, or applying policies to the Ingress via labels.
  extraLabels: {}

# -- Node labels for pod assignment.
nodeSelector: {}

# -- Tolerations for pod assignment
tolerations: []

# -- Affinity for pod assignment
affinity: {}

# -- Topology Spread Constraints for pod assignment
topologySpreadConstraints: []

# -- HostAliases to be added to hosts-file of each container
hostAliases: []

# -- Service values to expose Open WebUI pods to cluster
service:
  type: ClusterIP
  annotations: {}
  port: 80
  containerPort: 8080
  nodePort: ""
  labels: {}
  loadBalancerClass: ""

# -- Enables the use of OpenAI APIs
enableOpenaiApi: true

# -- OpenAI base API URL to use. Defaults to the Pipelines service endpoint when Pipelines are enabled, and "https://api.openai.com/v1" if Pipelines are not enabled and this value is blank
openaiBaseApiUrl: "https://api.openai.com/v1"

# -- OpenAI base API URLs to use. Overwrites the value in openaiBaseApiUrl if set
openaiBaseApiUrls:
  []
  # - "https://api.openai.com/v1"
  # - "https://api.company.openai.com/v1"

# -- Env vars added to the Open WebUI deployment, common across environments. Most up-to-date environment variables can be found here: https://docs.openwebui.com/getting-started/env-configuration/ (caution: environment variables defined in both `extraEnvVars` and `commonEnvVars` will result in a conflict. Avoid duplicates)
commonEnvVars: []
  # - name: RAG_EMBEDDING_ENGINE
  #   value: "openai"

# -- Env vars added from configmap or secret to the Open WebUI deployment. Most up-to-date environment variables can be found here: https://docs.openwebui.com/getting-started/env-configuration/ (caution: `extraEnvVars` will take precedence over the value from `extraEnvFrom`)
extraEnvFrom: []
  # - configMapRef:
  #     name: my-config
  # - secretRef:
  #     name: my-secret

# -- Configure runtime class
# ref: <https://kubernetes.io/docs/concepts/containers/runtime-class/>
runtimeClassName: ""

# -- Configure pod security context
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container>
podSecurityContext:
  {}
  # fsGroupChangePolicy: Always
  # sysctls: []
  # supplementalGroups: []
  # fsGroup: 1001

# -- Configure container security context
# ref: <https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-containe>
containerSecurityContext:
  {}
  # runAsUser: 1001
  # runAsGroup: 1001
  # runAsNonRoot: true
  # privileged: false
  # allowPrivilegeEscalation: false
  # readOnlyRootFilesystem: false
  # capabilities:
  #   drop:
  #     - ALL
  # seccompProfile:
  #   type: "RuntimeDefault"

sso:
  # -- **Enable SSO authentication globally** must enable to use SSO authentication
  # @section -- SSO Configuration
  enabled: false
  # -- Enable account creation when logging in with OAuth (distinct from regular signup)
  # @section -- SSO Configuration
  enableSignup: false
  # -- Allow logging into accounts that match email from OAuth provider (considered insecure)
  # @section -- SSO Configuration
  mergeAccountsByEmail: false
  # -- Enable OAuth role management through access token roles claim
  # @section -- SSO Configuration
  enableRoleManagement: false
  # -- Enable OAuth group management through access token groups claim
  # @section -- SSO Configuration
  enableGroupManagement: false

  google:
    # -- Enable Google OAuth
    # @section -- Google OAuth configuration
    enabled: false
    # -- Google OAuth client ID
    # @section -- Google OAuth configuration
    clientId: ""
    # -- Google OAuth client secret (ignored if clientExistingSecret is set)
    # @section -- Google OAuth configuration
    clientSecret: ""
    # -- Google OAuth client secret from existing secret
    # @section -- Google OAuth configuration
    clientExistingSecret: ""
    # -- Google OAuth client secret key from existing secret
    # @section -- Google OAuth configuration
    clientExistingSecretKey: ""

  microsoft:
    # -- Enable Microsoft OAuth
    # @section -- Microsoft OAuth configuration
    enabled: false
    # -- Microsoft OAuth client ID
    # @section -- Microsoft OAuth configuration
    clientId: ""
    # -- Microsoft OAuth client secret (ignored if clientExistingSecret is set)
    # @section -- Microsoft OAuth configuration
    clientSecret: ""
    # -- Microsoft OAuth client secret from existing secret
    # @section -- Microsoft OAuth configuration
    clientExistingSecret: ""
    # -- Microsoft OAuth client secret key from existing secret
    # @section -- Microsoft OAuth configuration
    clientExistingSecretKey: ""
    # -- Microsoft tenant ID - use 9188040d-6c67-4c5b-b112-36a304b66dad for personal accounts
    # @section -- Microsoft OAuth configuration
    tenantId: ""

  github:
    # -- Enable GitHub OAuth
    # @section -- GitHub OAuth configuration
    enabled: false
    # -- GitHub OAuth client ID
    # @section -- GitHub OAuth configuration
    clientId: ""
    # -- GitHub OAuth client secret (ignored if clientExistingSecret is set)
    # @section -- GitHub OAuth configuration
    clientSecret: ""
    # -- GitHub OAuth client secret from existing secret
    # @section -- GitHub OAuth configuration
    clientExistingSecret: ""
    # -- GitHub OAuth client secret key from existing secret
    # @section -- GitHub OAuth configuration
    clientExistingSecretKey: ""

  oidc:
    # -- Enable OIDC authentication
    # @section -- OIDC configuration
    enabled: false
    # -- OIDC client ID
    # @section -- OIDC configuration
    clientId: ""
    # -- OIDC client secret (ignored if clientExistingSecret is set)
    # @section -- OIDC configuration
    clientSecret: ""
    # -- OICD client secret from existing secret
    # @section -- OIDC configuration
    clientExistingSecret: ""
    # -- OIDC client secret key from existing secret
    # @section -- OIDC configuration
    clientExistingSecretKey: ""
    # -- OIDC provider well known URL
    # @section -- OIDC configuration
    providerUrl: ""
    # -- Name of the provider to show on the UI
    # @section -- OIDC configuration
    providerName: "SSO"
    # -- Scopes to request (space-separated).
    # @section -- OIDC configuration
    scopes: "openid email profile"

  roleManagement:
    # -- The claim that contains the roles (can be nested, e.g., user.roles)
    # @section -- Role management configuration
    rolesClaim: "roles"
    # -- Comma-separated list of roles allowed to log in (receive open webui role user)
    # @section -- Role management configuration
    allowedRoles: ""
    # -- Comma-separated list of roles allowed to log in as admin (receive open webui role admin)
    # @section -- Role management configuration
    adminRoles: ""

  groupManagement:
    # -- The claim that contains the groups (can be nested, e.g., user.memberOf)
    # @section -- SSO Configuration
    groupsClaim: "groups"

  trustedHeader:
    # -- Enable trusted header authentication
    # @section -- SSO trusted header authentication
    enabled: false
    # -- Header containing the user's email address
    # @section -- SSO trusted header authentication
    emailHeader: ""
    # -- Header containing the user's name (optional, used for new user creation)
    # @section -- SSO trusted header authentication
    nameHeader: ""

# -- Extra resources to deploy with Open WebUI
extraResources:
  []
  # - apiVersion: v1
  #   kind: ConfigMap
  #   metadata:
  #     name: example-configmap
  #   data:
  #     example-key: example-value

# -- Configure database URL, needed to work with Postgres (example: `postgresql://<user>:<password>@<service>:<port>/<database>`), leave empty to use the default sqlite database
databaseUrl: ""

# -- Postgresql configuration (see. https://artifacthub.io/packages/helm/bitnami/postgresql)
postgresql:
  enabled: false
  fullnameOverride: open-webui-postgres
  architecture: standalone
  auth:
    database: open-webui
    postgresPassword: 0p3n-w3bu!
    username: open-webui
    password: 0p3n-w3bu!
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m

# Configure Application logging levels (see. https://docs.openwebui.com/getting-started/advanced-topics/logging#-logging-levels-explained)
logging:
  # -- Set the global log level ["notset", "debug", "info" (default), "warning", "error", "critical"]
  # @section -- Logging configuration
  level: ""

  # Optional granularity: override log levels per subsystem/component
  # if not set, it will use the global level (see. https://docs.openwebui.com/getting-started/advanced-topics/logging#%EF%B8%8F-appbackend-specific-logging-levels)
  components:
    # -- Set the log level for the Audio processing component
    # @section -- Logging configuration
    audio: ""
    # -- Set the log level for the ComfyUI Integration component
    # @section -- Logging configuration
    comfyui: ""
    # -- Set the log level for the Configuration Management component
    # @section -- Logging configuration
    config: ""
    # -- Set the log level for the Database Operations (Peewee) component
    # @section -- Logging configuration
    db: ""
    # -- Set the log level for the Image Generation component
    # @section -- Logging configuration
    images: ""
    # -- Set the log level for the Main Application Execution component
    # @section -- Logging configuration
    main: ""
    # -- Set the log level for the Model Management component
    # @section -- Logging configuration
    models: ""
    # -- Set the log level for the Ollama Backend Integration component
    # @section -- Logging configuration
    ollama: ""
    # -- Set the log level for the OpenAI API Integration component
    # @section -- Logging configuration
    openai: ""
    # -- Set the log level for the Retrieval-Augmented Generation (RAG) component
    # @section -- Logging configuration
    rag: ""
    # -- Set the log level for the Authentication Webhook component
    # @section -- Logging configuration
    webhook: ""
