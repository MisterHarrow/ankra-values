# Required as vectorDB for RAG
# provide context-aware responses based on user-uploaded files
global:
  librechat:
    existingSecretName: "librechat-credentials-env"
    existingSecretApiKey: OPENAI_API_KEY

rag:
  enabled: true
  configEnv:
    # This block is for application-level settings.
    # The primary DB connection is configured below.
    LOG_LEVEL: "DEBUG"
    DB_HOST: "librechat-pg-cluster-rw.default.svc.cluster.local"
    DB_PORT: '5432'
    DB_NAME: "librechat_rag_db"
    EMBEDDINGS_PROVIDER: "huggingfacetei"
    EMBEDDINGS_MODEL: "http://embedding-minilm-l6-v2-transformer.kserve.svc.cluster.local/v2/models/embedding-minilm-l6-v2/infer"

image:
  repository: danny-avila/librechat-rag-api-dev
  registry: ghcr.io
  pullPolicy: IfNotPresent
  tag: "v0.1.10"

# Command override to force development mode for verbose logging
command:
  - "uvicorn"
  - "app.main:app"
  - "--host"
  - "0.0.0.0"
  - "--port"
  - "8000"
  - "--log-level"
  - "debug"

postgresql:
  enabled: false # We are using an external CNPG instance.
  auth:
    # This block configures the primary database connection environment variables.
    # It will set POSTGRES_USER, POSTGRES_PASSWORD, and POSTGRES_DB.
    username: "librechat_user"
    database: "librechat_rag_db"
    # We are now pointing to our new, manually-created secret.
    existingSecret: "librechat-rag-db-secret"
    # We no longer need to specify the key, as the chart will use the
    # default 'postgres-password' key which now exists in our new secret.

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

podAnnotations: {}
podLabels: {}

podSecurityContext: {} # fsGroup: 2000

securityContext: {}

service:
  type: ClusterIP
  port: 8000
  annotations: {}

resources: {}

serviceAccount:
  create: false
  name: ""
  annotations: {}

volumeMounts: {}

volumes: {}

nodeSelector: {}

tolerations: []

affinity: {}

extraContainers: {}