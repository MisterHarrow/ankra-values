# Required as vectorDB for RAG
# provide context-aware responses based on user-uploaded files
global:
  librechat:
    existingSecretName: "librechat-credentials-env"
    existingSecretApiKey: OPENAI_API_KEY

rag:
  enabled: true
  configEnv:
    DB_HOST: "librechat-pg-cluster-rw.default.svc.cluster.local" # CNPG service for read-write operations
    DB_PORT: '5432' # Default PostgreSQL port
    DB_USER: "postgres" # User from the 'librechat-pg-cluster-app' secret
    DB_NAME: "librechat_rag_db" # Database name from the 'librechat-pg-cluster-app' secret
    # DB_PASSWORD will be sourced from the 'librechat-pg-cluster-app' Kubernetes secret.
    # This secret is managed by CloudNativePG and provides credentials for the 'postgres' user.
    # Ensure the RAG API's service account has permission to read this secret.

    DB_PASSWORD_SECRET_NAME: "librechat-pg-cluster-app" # CNPG-managed secret for app access
    DB_PASSWORD_SECRET_KEY: "password" # Key in the secret for the DB password

    EMBEDDINGS_PROVIDER: 
    HUGGINGFACE_API_BASE: "http://embedding-minilm-l6-v2-predictor.kserve.svc.cluster.local" 
    HUGGINGFACE_MODEL_ID: "sentence-transformers/all-MiniLM-L6-v2"
    # HUGGINGFACE_API_KEY: "dummy-kserve-key" # Usually not needed for self-hosted HF endpoints if no auth is configured on KServe
    # Other RAG API specific env vars might go here if needed (e.g., related to vector DB connection details if not covered by existingSecret elsewhere)

image:
  repository: danny-avila/librechat-rag-api-dev # there is rag-api-dev and rag-api-dev-lite. currently only lite is documented
  registry: ghcr.io
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: latest

postgresql:
  enabled: false # Disabled to use external CloudNativePG instance
  # nameOverride: vectordb
  image:
    registry: ghcr.io
    repository: bat-bs/bitnami-pgvector
    tag: pg16
  auth:
    database: librechat-vectordb
    username: postgres
    # define a secret with values for "postgres-password", "password" (user Password)  and "replication-password" or add values directly
    existingSecret: librechat-vectordb # This was for the embedded DB. Will need to be handled by RAG API's env vars for external DB.
    # postgres-password is needed to enable pgvector extension. If you enable it manually you can use "password" and user "librechat"
    existingSecretKey: postgres-password # This was for the embedded DB.

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

podAnnotations: {}
podLabels: {}

podSecurityContext: {} # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8000
  annotations: {}


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

serviceAccount:
  create: false
  name: ""
  annotations: {}

volumeMounts: {}

volumes: {}

nodeSelector: {}

tolerations: []

affinity: {}

extraContainers: {}