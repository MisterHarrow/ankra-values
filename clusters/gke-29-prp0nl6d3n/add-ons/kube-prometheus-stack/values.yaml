---
nameOverride: ""
namespaceOverride: ""
kubeTargetVersionOverride: ""
kubeVersionOverride: ""
fullnameOverride: ""
commonLabels: {}
crds:
  enabled: true
  upgradeJob:
    enabled: false
    forceConflicts: false
    image:
      busybox:
        registry: docker.io
        repository: busybox
        tag: latest
        sha: ""
        pullPolicy: IfNotPresent
      kubectl:
        registry: registry.k8s.io
        repository: kubectl
        tag: ""
        sha: ""
        pullPolicy: IfNotPresent
    env: {}
    resources: {}
    extraVolumes: []
    extraVolumeMounts: []
    nodeSelector: {}
    affinity: {}
    tolerations: []
    topologySpreadConstraints: []
    labels: {}
    annotations: {}
    podLabels: {}
    podAnnotations: {}
    serviceAccount:
      create: true
      name: ""
      annotations: {}
      labels: {}
      automountServiceAccountToken: true
    containerSecurityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop:
          - ALL
    podSecurityContext:
      fsGroup: 65534
      runAsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
customRules: {}
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8sContainerCpuUsageSecondsTotal: true
    k8sContainerMemoryCache: true
    k8sContainerMemoryRss: true
    k8sContainerMemorySwap: true
    k8sContainerResource: true
    k8sContainerMemoryWorkingSetBytes: true
    k8sPodOwner: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeSchedulerAlerting: true
    kubeSchedulerRecording: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true
    windows: true
  appNamespacesTarget: .*
  keepFiringFor: ""
  labels: {}
  annotations: {}
  additionalRuleLabels: {}
  additionalRuleAnnotations: {}
  additionalRuleGroupLabels:
    alertmanager: {}
    etcd: {}
    configReloaders: {}
    general: {}
    k8sContainerCpuUsageSecondsTotal: {}
    k8sContainerMemoryCache: {}
    k8sContainerMemoryRss: {}
    k8sContainerMemorySwap: {}
    k8sContainerResource: {}
    k8sPodOwner: {}
    kubeApiserverAvailability: {}
    kubeApiserverBurnrate: {}
    kubeApiserverHistogram: {}
    kubeApiserverSlos: {}
    kubeControllerManager: {}
    kubelet: {}
    kubeProxy: {}
    kubePrometheusGeneral: {}
    kubePrometheusNodeRecording: {}
    kubernetesApps: {}
    kubernetesResources: {}
    kubernetesStorage: {}
    kubernetesSystem: {}
    kubeSchedulerAlerting: {}
    kubeSchedulerRecording: {}
    kubeStateMetrics: {}
    network: {}
    node: {}
    nodeExporterAlerting: {}
    nodeExporterRecording: {}
    prometheus: {}
    prometheusOperator: {}
  additionalRuleGroupAnnotations:
    alertmanager: {}
    etcd: {}
    configReloaders: {}
    general: {}
    k8sContainerCpuUsageSecondsTotal: {}
    k8sContainerMemoryCache: {}
    k8sContainerMemoryRss: {}
    k8sContainerMemorySwap: {}
    k8sContainerResource: {}
    k8sPodOwner: {}
    kubeApiserverAvailability: {}
    kubeApiserverBurnrate: {}
    kubeApiserverHistogram: {}
    kubeApiserverSlos: {}
    kubeControllerManager: {}
    kubelet: {}
    kubeProxy: {}
    kubePrometheusGeneral: {}
    kubePrometheusNodeRecording: {}
    kubernetesApps: {}
    kubernetesResources: {}
    kubernetesStorage: {}
    kubernetesSystem: {}
    kubeSchedulerAlerting: {}
    kubeSchedulerRecording: {}
    kubeStateMetrics: {}
    network: {}
    node: {}
    nodeExporterAlerting: {}
    nodeExporterRecording: {}
    prometheus: {}
    prometheusOperator: {}
  additionalAggregationLabels: []
  runbookUrl: https://runbooks.prometheus-operator.dev/runbooks
  node:
    fsSelector: fstype!=""
  disabled: {}
additionalPrometheusRulesMap: {}
global:
  rbac:
    create: true
    createAggregateClusterRoles: false
    pspEnabled: false
    pspAnnotations: {}
  imageRegistry: ""
  imagePullSecrets: []
windowsMonitoring:
  enabled: false
prometheus-windows-exporter:
  prometheus:
    monitor:
      enabled: true
      jobLabel: jobLabel
  releaseLabel: true
  podLabels:
    jobLabel: windows-exporter
  config: |-
    collectors:
      enabled: '[defaults],memory,container'
alertmanager:
  enabled: true
  namespaceOverride: ""
  annotations: {}
  apiVersion: v2
  enableFeatures: []
  forceDeployDashboards: false
  networkPolicy:
    enabled: false
    policyTypes:
      - Ingress
    gateway:
      namespace: ""
      podLabels: {}
    additionalIngress: []
    egress:
      enabled: false
      rules: []
    enableClusterRules: true
    monitoringRules:
      prometheus: true
      configReloader: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    unhealthyPodEvictionPolicy: AlwaysAllow
  config:
    global:
      resolve_timeout: 5m
    inhibit_rules:
      - source_matchers:
          - severity = critical
        target_matchers:
          - severity =~ warning|info
        equal:
          - namespace
          - alertname
      - source_matchers:
          - severity = warning
        target_matchers:
          - severity = info
        equal:
          - namespace
          - alertname
      - source_matchers:
          - alertname = InfoInhibitor
        target_matchers:
          - severity = info
        equal:
          - namespace
      - target_matchers:
          - alertname = InfoInhibitor
    route:
      group_by:
        - namespace
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: "null"
      routes:
        - receiver: "null"
          matchers:
            - alertname = "Watchdog"
    receivers:
      - name: "null"
    templates:
      - /etc/alertmanager/config/*.tmpl
  stringConfig: ""
  tplConfig: false
  templateFiles: {}
  ingress:
    enabled: false
    annotations: {}
    labels: {}
    hosts: []
    paths: []
    tls: []
  route:
    main:
      enabled: false
      apiVersion: gateway.networking.k8s.io/v1
      kind: HTTPRoute
      annotations: {}
      labels: {}
      hostnames: []
      parentRefs: []
      httpsRedirect: false
      matches:
        - path:
            type: PathPrefix
            value: /
      filters: []
      additionalRules: []
  secret:
    annotations: {}
  ingressPerReplica:
    enabled: false
    annotations: {}
    labels: {}
    hostPrefix: ""
    hostDomain: ""
    paths: []
    tlsSecretName: ""
    tlsSecretPerReplica:
      enabled: false
      prefix: alertmanager
  service:
    enabled: true
    annotations: {}
    labels: {}
    clusterIP: ""
    ipDualStack:
      enabled: false
      ipFamilies:
        - IPv6
        - IPv4
      ipFamilyPolicy: PreferDualStack
    port: 9093
    targetPort: 9093
    nodePort: 30903
    additionalPorts: []
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
    sessionAffinityConfig:
      clientIP:
        timeoutSeconds: 10800
    type: ClusterIP
  servicePerReplica:
    enabled: false
    annotations: {}
    port: 9093
    targetPort: 9093
    nodePort: 30904
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    type: ClusterIP
  serviceMonitor:
    selfMonitor: true
    interval: ""
    additionalLabels: {}
    sampleLimit: 0
    targetLimit: 0
    labelLimit: 0
    labelNameLengthLimit: 0
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
prometheus:
  ingress:
    enabled: false
  prometheusSpec:
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 50Gi
    retention: 30d
    retentionSize: ""