apiVersion: v1
kind: ImportCluster
metadata:
  name: bens-ai-stack-cluster
  description: Your imported cluster
spec:
  git_repository:
    provider: github
    credential_name: User-MisterHarrow
    branch: main
    repository: MisterHarrow/ankra-values
  stacks:
  - name: UI-AI-STACK
    description: ''
    manifests:
    - name: open-webui-db-secret
      manifest_base64: YXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogIG5hbWU6IGNucGctcmFnLWRiLWNvbm5lY3Rpb24KICBuYW1lc3BhY2U6IGRlZmF1bHQKdHlwZTogT3BhcXVlCnN0cmluZ0RhdGE6CiAgIyBVcGRhdGVkIHdpdGggdGhlIGNvcnJlY3QgYXV0by1nZW5lcmF0ZWQgcGFzc3dvcmQgZnJvbSBwZy1jbHVzdGVyLWFwcCBzZWNyZXQKICBEQVRBQkFTRV9VUkw6ICJwb3N0Z3Jlc3FsOi8vcmFnX3VzZXI6bWRKc0V4VXZITFRlZDRyc2FUS0JhVzdMMXB6ZktNcmZ1Rlo5b0pRVXZXcHQ3N0NBMFo1UE9UNm5rS0JUOFpBSEBwZy1jbHVzdGVyLXJ3LmRlZmF1bHQuc3ZjLmNsdXN0ZXIubG9jYWw6NTQzMi9yYWdfZGIiIA==
      namespace: default
      parents:
      - name: cnpg-cluster-cr
        kind: manifest
    - name: cnpg-cluster-cr
      manifest_base64: YXBpVmVyc2lvbjogcG9zdGdyZXNxbC5jbnBnLmlvL3YxCmtpbmQ6IENsdXN0ZXIKbWV0YWRhdGE6CiAgbmFtZTogcGctY2x1c3RlcgogIG5hbWVzcGFjZTogY2xvdWRuYXRpdmUtcGcKc3BlYzoKICBpbnN0YW5jZXM6IDEgIyBGb3IgYSBzaW1wbGUgc2V0dXAsIDMgZm9yIEhBCiAgaW1hZ2VOYW1lOiBnaGNyLmlvL3RlbnNvcmNob3JkL2Nsb3VkbmF0aXZlLXBndmVjdG8ucnM6MTYuMy12MC4yLjEKCiAgc3RvcmFnZToKICAgIHNpemU6IDEwR2kKICAgIHN0b3JhZ2VDbGFzczogc3RhbmRhcmQKICBib290c3RyYXA6CiAgICBpbml0ZGI6CiAgICAgIGRhdGFiYXNlOiByYWdfZGIKICAgICAgb3duZXI6IHJhZ191c2VyCiAgICAgIHBvc3RJbml0U1FMOgogICAgICAgIC0gIkFMVEVSIFNZU1RFTSBTRVQgc2VhcmNoX3BhdGggVE8gXCIkdXNlclwiLCBwdWJsaWMsIHZlY3RvcnM7IgogICAgICAgIC0gIkNSRUFURSBFWFRFTlNJT04gSUYgTk9UIEVYSVNUUyBcInZlY3RvcnNcIjsiCiAgICAgICAgLSAiQ1JFQVRFIERBVEFCQVNFIGp1cHl0ZXJodWJfZGIgV0lUSCBPV05FUiBqdXB5dGVyaHViX3VzZXI7IgogIG1hbmFnZWQ6CiAgICByb2xlczoKICAgICAgLSBuYW1lOiByYWdfdXNlciAjIENOUEcgY3JlYXRlcyB0aGlzIHVzZXIgYW5kIGl0cyBzZWNyZXQuCiAgICAgICAgZW5zdXJlOiBwcmVzZW50CiAgICAgICAgbG9naW46IHRydWUKICAgICAgLSBuYW1lOiBqdXB5dGVyaHViX3VzZXIgIyBUaGlzIHdpbGwgY3JlYXRlIHRoZSB1c2VyIGFuZCBhIHNlY3JldAogICAgICAgIGVuc3VyZTogcHJlc2VudAogICAgICAgIGxvZ2luOiB0cnVlCgoKICAjIEVuYWJsZSBwZ3ZlY3RvciBleHRlbnNpb24KICAjIFRoaXMgcmVxdWlyZXMgdGhlIFBvc3RncmVTUUwgaW1hZ2UgdG8gaGF2ZSBwZ3ZlY3RvciBwcmUtaW5zdGFsbGVkLgogICMgVGhlIGltYWdlIGdoY3IuaW8vY2xvdWRuYXRpdmUtcGcvcG9zdGdyZXNxbCB1c3VhbGx5IGluY2x1ZGVzIGNvbW1vbiBleHRlbnNpb25zLgogICMgRm9yIHBndmVjdG9yIHNwZWNpZmljYWxseSwgYW4gaW1hZ2UgbGlrZSBgZ2hjci5pby9jbG91ZG5hdGl2ZS1wZy9wb3N0Z3Jlc3FsOjx2ZXJzaW9uPi1wZ3ZlY3RvcmAgbWlnaHQgYmUgbmVlZGVkCiAgIyBvciB5b3UgbWlnaHQgbmVlZCB0byBlbnN1cmUgeW91ciBzZWxlY3RlZCBpbWFnZSBjb250YWlucyBpdC4KICAjIFRoZSBvZmZpY2lhbCBDTlBHIGRvY3MvY29tbXVuaXR5IHdvdWxkIGhhdmUgdGhlIGxhdGVzdCBvbiBiZXN0IHBndmVjdG9yIGltYWdlLgogICMKICAjIEFuIGFsdGVybmF0aXZlIGZvciBleHRlbnNpb25zIGlzIHRvIHVzZSBwb3N0SW5pdEFwcGxpY2F0aW9uU1FMIG9yIHBvc3RJbml0U1FMIHNjcmlwdHMuCiAgIwogICMgSWYgdXNpbmcgYSBzdGFuZGFyZCBpbWFnZSwgeW91IG1pZ2h0IG5lZWQgdG8gY3JlYXRlIHRoZSBleHRlbnNpb24gbWFudWFsbHkgYWZ0ZXIgY2x1c3RlciBjcmVhdGlvbgogICMgb3IgdXNlIGEgcG9zdC1pbml0IHNjcmlwdC4gSG93ZXZlciwgQ05QRyBoYXMgZXZvbHZpbmcgc3VwcG9ydCBmb3IgZXh0ZW5zaW9ucy4KCiAgIyBGb3IgZW5hYmxpbmcgZXh0ZW5zaW9ucyBsaWtlIHBndmVjdG9yLCBpdCdzIG9mdGVuIGRvbmUgYnkgcnVubmluZyBTUUwgY29tbWFuZHMKICAjIGFmdGVyIHRoZSBkYXRhYmFzZSBpcyBpbml0aWFsaXplZC4gWW91IGNhbiB1c2UgYHBvc3RJbml0QXBwbGljYXRpb25TUUxgLgogICMgRW5zdXJlIHRoZSB1c2VyICgncG9zdGdyZXMnIG9yIHlvdXIgYXBwIHVzZXIpIGhhcyBwZXJtaXNzaW9uIHRvIGNyZWF0ZSBleHRlbnNpb25zLgogICMgcG9zdEluaXRBcHBsaWNhdGlvblNRTDoKICAjICAgLSBDUkVBVEUgRVhURU5TSU9OIElGIE5PVCBFWElTVFMgdmVjdG9yOwogICMgLSBDUkVBVEUgRVhURU5TSU9OIElGIE5PVCBFWElTVFMgcGdfc3RhdF9zdGF0ZW1lbnRzOyAjIEV4YW1wbGUgb2YgYW5vdGhlciB1c2VmdWwgZXh0ZW5zaW9uCgogICMgRXhwb3NlIHRoZSBjbHVzdGVyIHdpdGggYSBzZXJ2aWNlCiAgIyBDTlBHIGNyZWF0ZXMgc2VydmljZXMgYnkgZGVmYXVsdC4gVGhlIHByaW1hcnkgc2VydmljZSBpcyB1c3VhbGx5IDxjbHVzdGVyLW5hbWU+LXJ3CiAgIyBZb3UgY2FuIGN1c3RvbWl6ZSBzZXJ2aWNlIGFubm90YXRpb25zIG9yIHR5cGVzIGlmIG5lZWRlZC4KCiAgIyBNb25pdG9yaW5nIChpZiB5b3UgaGF2ZSBQcm9tZXRoZXVzIG9wZXJhdG9yIGluc3RhbGxlZCkKICBtb25pdG9yaW5nOgogICAgZW5hYmxlUG9kTW9uaXRvcjogdHJ1ZSAjIElmIHlvdSBzZXQgdXAgUHJvbWV0aGV1cyBPcGVyYXRvcgoKICAjIEJhY2t1cCBDb25maWd1cmF0aW9uIChFeGFtcGxlIGZyb20gYW5rcmEtbWxvcHMtZGItY2x1c3Rlci55YW1sLCBhZGp1c3QgYXMgbmVlZGVkKQogICMgSWYgeW91IGFyZSB1c2luZyAnbGlicmVjaGF0LXBnLWNsdXN0ZXInLCB5b3UgbWlnaHQgbm90IG5lZWQgdGhpcyBlbGFib3JhdGUgYmFja3VwIHlldCwKICAjIG9yIHlvdSBjYW4gYWRhcHQgaXQuCiAgIyBiYWNrdXA6CiAgIyAgIGJhcm1hbk9iamVjdFN0b3JlOgogICMgICAgIGRlc3RpbmF0aW9uUGF0aDogImdzOi8vYW5rcmFfbWxfYnVja2V0L3lvdXItY2x1c3Rlci1uYW1lLWJhY2t1cHMvIiAjIElNUE9SVEFOVDogVXNlIHVuaXF1ZSBwYXRoIHBlciBjbHVzdGVyCiAgIyAgICAgZ29vZ2xlQ3JlZGVudGlhbHM6CiAgIyAgICAgICBna2VFbnZpcm9ubWVudDogdHJ1ZQogICMgICByZXRlbnRpb25Qb2xpY3k6ICI3ZCIgIyBLZWVwIGJhY2t1cHMgZm9yIDcgZGF5cwoKICAjIFBvc3RncmVTUUwgQ29uZmlndXJhdGlvbiAocGdfaGJhLmNvbmYgZXhhbXBsZSkKICBwb3N0Z3Jlc3FsOgogICAgcGdfaGJhOgogICAgICAtIGhvc3QgYWxsIGxpYnJlY2hhdF91c2VyIGFsbCBtZDUgIyBBbGxvdyBsaWJyZWNoYXRfdXNlciB0byBjb25uZWN0IGZyb20gYW55d2hlcmUgd2l0aCBtZDUKICAgICAgLSBob3N0IGFsbCBwb3N0Z3JlcyBhbGwgbWQ1ICAgICAgICAjIEFsbG93IHBvc3RncmVzIHVzZXIgKHN1cGVydXNlcikKICAgICAgIyBZb3UgbWlnaHQgd2FudCB0byByZXN0cmljdCAnYWxsJyB0byBzcGVjaWZpYyBJUHMgb3IgdXNlICdzYW1laG9zdCcgaWYgYXBwcm9wcmlhdGUKICAgIHNoYXJlZF9wcmVsb2FkX2xpYnJhcmllczoKICAgICAgLSAidmVjdG9ycy5zbyIK
      namespace: cloudnative-pg
      parents:
      - name: cloudnative-pg
        kind: addon
    - name: knative-serving-cr
      manifest_base64: IyBrbmF0aXZlLXNlcnZpbmctY3IueWFtbAphcGlWZXJzaW9uOiBvcGVyYXRvci5rbmF0aXZlLmRldi92MWJldGExCmtpbmQ6IEtuYXRpdmVTZXJ2aW5nCm1ldGFkYXRhOgogIG5hbWU6IGtuYXRpdmUtc2VydmluZwogIG5hbWVzcGFjZToga25hdGl2ZS1vcGVyYXRvcgpzcGVjOgogIGluZ3Jlc3M6CiAgICBrb3VyaWVyOgogICAgICBlbmFibGVkOiB0cnVlCiAgY29uZmlnOgogICAgIyBUaGlzIHNlY3Rpb24gbWFwcyB0byB0aGUgJ2NvbmZpZy1uZXR3b3JrJyBDb25maWdNYXAKICAgIG5ldHdvcms6CiAgICAgIGluZ3Jlc3MtY2xhc3M6ICJrb3VyaWVyLmluZ3Jlc3MubmV0d29ya2luZy5rbmF0aXZlLmRldiIKCiAgICAjIFRoaXMgc2VjdGlvbiBtYXBzIHRvIHRoZSAnY29uZmlnLWRvbWFpbicgQ29uZmlnTWFwCiAgICBkb21haW46IHt9CgogICAgZmVhdHVyZXM6CiAgICAgICMgVGhlc2UgYXJlIHRoZSB0d28ga2V5cyB3ZSBuZWVkIHRvIGNoYW5nZSB0byAnZW5hYmxlZCcKICAgICAga3ViZXJuZXRlcy5wb2RzcGVjLW5vZGVzZWxlY3RvcjogImVuYWJsZWQiCiAgICAgIGt1YmVybmV0ZXMucG9kc3BlYy10b2xlcmF0aW9uczogImVuYWJsZWQi
      namespace: knative-operator
      parents:
      - name: knative-operator
        kind: addon
    - name: embedding-minilm-l6-v2-isvc
      manifest_base64: YXBpVmVyc2lvbjogInNlcnZpbmcua3NlcnZlLmlvL3YxYmV0YTEiCmtpbmQ6ICJJbmZlcmVuY2VTZXJ2aWNlIgptZXRhZGF0YToKICBuYW1lOiAiZW1iZWRkaW5nLW1pbmlsbS1sNi12MiIKICBuYW1lc3BhY2U6IGtzZXJ2ZSAgICAgICAgICAgICAgICAjIE9yICdkZWZhdWx0Jywgb3IgeW91ciBwcmVmZXJyZWQgbWwtc2VydmljZXMgbmFtZXNwYWNlCiAgYW5ub3RhdGlvbnM6CiAgICAjIEFkZCBLbmF0aXZlIHNjYWxpbmcgYW5ub3RhdGlvbnMKICAgIGF1dG9zY2FsaW5nLmtuYXRpdmUuZGV2L21pblNjYWxlOiAiMCIgICMgQWxsb3cgc2NhbGluZyB0byB6ZXJvCiAgICBhdXRvc2NhbGluZy5rbmF0aXZlLmRldi9tYXhTY2FsZTogIjEwIiAjIFNldCBhIHJlYXNvbmFibGUgbWF4IHNjYWxlCiAgICBhdXRvc2NhbGluZy5rbmF0aXZlLmRldi90YXJnZXQ6ICIyMCIgICMgVGFyZ2V0IGNvbmN1cnJlbmN5CnNwZWM6CiAgcHJlZGljdG9yOgogICAgYW5ub3RhdGlvbnM6CiAgICAgIGF1dG9zY2FsaW5nLmtuYXRpdmUuZGV2L21pblNjYWxlOiAiMCIKICAgICAgYXV0b3NjYWxpbmcua25hdGl2ZS5kZXYvbWF4U2NhbGU6ICIxMCIKICAgICAgYXV0b3NjYWxpbmcua25hdGl2ZS5kZXYvdGFyZ2V0OiAiMjAiCiAgICAjIFJlbW92ZSBtaW5SZXBsaWNhcyB0byBhbGxvdyBzY2FsZS10by16ZXJvCiAgICAjIEVuc3VyZSB0aGUgcHJlZGljdG9yIHJ1bnMgb24gYSBHUFUgbm9kZQogICAgbm9kZVNlbGVjdG9yOgogICAgICBjbG91ZC5nb29nbGUuY29tL2drZS1hY2NlbGVyYXRvcjogbnZpZGlhLWw0CiAgICB0b2xlcmF0aW9uczoKICAgIC0ga2V5OiAibnZpZGlhLmNvbS9ncHUiCiAgICAgIG9wZXJhdG9yOiAiRXhpc3RzIgogICAgICBlZmZlY3Q6ICJOb1NjaGVkdWxlIgogICAgbW9kZWw6ICMgVGhpcyBpcyB0aGUgS1NlcnZlIHYwLjEwKyBtb2RlbCBzcGVjIHN0cnVjdHVyZQogICAgICBtb2RlbEZvcm1hdDoKICAgICAgICBuYW1lOiBodWdnaW5nZmFjZQogICAgICAjIHByb3RvY29sVmVyc2lvbjogInYyIiAjIERFTEVURUQ6IFRoaXMgd2FzIGNvbmZsaWN0aW5nIHdpdGggdGhlIG9wZW5haSBwcm90b2NvbCBhcmcKICAgICAgIyBUaGUgJ2FyZ3MnIGZpZWxkIGlzIGhvdyBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQgdG8gdGhlIGh1Z2dpbmdmYWNlc2VydmVyIHJ1bnRpbWUKICAgICAgYXJnczoKICAgICAgICAtICItLW1vZGVsX2lkIgogICAgICAgIC0gInNlbnRlbmNlLXRyYW5zZm9ybWVycy9hbGwtTWluaUxNLUw2LXYyIgogICAgICAgIC0gIi0tbW9kZWxfcmV2aXNpb24iICMgUGlubmluZyB0byBhIHNwZWNpZmljIHJldmlzaW9uIGlzIGdvb2QgcHJhY3RpY2UKICAgICAgICAtICI4YjMyMTlhOTI5NzNjMzI4YThlMjJmYWRjZmE4MjFiNWRjNzU2MzZhIgogICAgICAgICMgLS10b2tlbml6ZXJfcmV2aXNpb24gaXMgb2Z0ZW4gdGhlIHNhbWUgYXMgbW9kZWxfcmV2aXNpb24gZm9yIHNlbnRlbmNlIHRyYW5zZm9ybWVycwogICAgICAgIC0gIi0tdG9rZW5pemVyX3JldmlzaW9uIgogICAgICAgIC0gIjhiMzIxOWE5Mjk3M2MzMjhhOGUyMmZhZGNmYTgyMWI1ZGM3NTYzNmEiCiAgICAgICAgLSAiLS10YXNrIgogICAgICAgIC0gInRleHRfZW1iZWRkaW5nIiAjIEV4cGxpY2l0bHkgc2V0dGluZyB0aGUgdGFzawogICAgICAgIC0gIi0tYmFja2VuZCIgICAgICAjIFRoaXMgZW5zdXJlcyBLU2VydmUgdXNlcyB0aGUgSEYgb3B0aW1pemVkIHNlcnZlcgogICAgICAgIC0gImh1Z2dpbmdmYWNlIgogICAgICByZXNvdXJjZXM6ICMgRGVmaW5lIGFwcHJvcHJpYXRlIHJlc291cmNlcwogICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgY3B1OiAiMC41IiAjIFN0YXJ0IHdpdGggdGhpcywgbW9uaXRvciBhbmQgYWRqdXN0CiAgICAgICAgICBtZW1vcnk6ICIyR2kiCiAgICAgICAgICBudmlkaWEuY29tL2dwdTogIjEiCiAgICAgICAgbGltaXRzOgogICAgICAgICAgY3B1OiAiMSIKICAgICAgICAgIG1lbW9yeTogIjRHaSIKICAgICAgICAgIG52aWRpYS5jb20vZ3B1OiAiMSIKICAgICAgIyBOb3RlOiBUaGUgcnVudGltZSBpbWFnZSAoa3NlcnZlL2h1Z2dpbmdmYWNlc2VydmVyOnYwLjE1LjIpIGlzIGltcGxpY2l0bHkgdXNlZAogICAgICAjIGJlY2F1c2UgJ21vZGVsRm9ybWF0Lm5hbWU6IGh1Z2dpbmdmYWNlJyBtYXBzIHRvIHRoZSBkZWZhdWx0IEh1Z2dpbmdGYWNlIHJ1bnRpbWUKICAgICAgIyBjb25maWd1cmVkIGluIHlvdXIgS1NlcnZlIGluc3RhbGxhdGlvbi4KCiAgIyAtLS0gTkVXIFRSQU5TRk9STUVSIFNFQ1RJT04gLS0tCiAgIyBUaGlzIHNlY3Rpb24gaW50ZXJjZXB0cyByZXF1ZXN0cywgdHJhbnNmb3JtcyB0aGVtLCBhbmQgZm9yd2FyZHMgdG8gdGhlIHByZWRpY3Rvci4KICB0cmFuc2Zvcm1lcjoKICAgIGFubm90YXRpb25zOgogICAgICBhdXRvc2NhbGluZy5rbmF0aXZlLmRldi9taW5TY2FsZTogIjAiCiAgICAgIGF1dG9zY2FsaW5nLmtuYXRpdmUuZGV2L21heFNjYWxlOiAiMTAiCiAgICAgIGF1dG9zY2FsaW5nLmtuYXRpdmUuZGV2L3RhcmdldDogIjIwIgogICAgICByZXN0YXJ0ZWRBdDogIjIwMjUtMDYtMDlUMTQ6MzA6MDBaIgogICAgIyBVc2UgdGhlIHNlY3JldCB3ZSBjcmVhdGVkIHRvIHB1bGwgdGhlIGltYWdlIGZyb20gR0hDUgogICAgaW1hZ2VQdWxsU2VjcmV0czoKICAgICAgLSBuYW1lOiBnaGNyLXNlY3JldAogICAgY29udGFpbmVyczoKICAgICAgLSBpbWFnZTogZ2hjci5pby9taXN0ZXJoYXJyb3cva3NlcnZlLWVtYmVkZGluZy10cmFuc2Zvcm1lcjp2MC4xLjAKICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgIG5hbWU6IGtzZXJ2ZS1jb250YWluZXIgIyBUaGlzIG5hbWUgaXMgcmVxdWlyZWQgYnkgS1NlcnZlCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgIGNwdTogIjEwMG0iCiAgICAgICAgICAgIG1lbW9yeTogIjI1Nk1pIgogICAgICAgICAgbGltaXRzOgogICAgICAgICAgICBjcHU6ICI1MDBtIgogICAgICAgICAgICBtZW1vcnk6ICI1MTJNaSI=
      namespace: kserve
      parents:
      - name: kserve
        kind: addon
    addons:
    - name: cloudnative-pg
      chart_name: cloudnative-pg
      chart_version: 0.24.0
      repository_url: https://cloudnative-pg.io/charts
      namespace: default
      configuration_type: standalone
      configuration:
        values_base64: 
      parents: []
    - name: opentelemetry-collector
      chart_name: opentelemetry-collector
      chart_version: 0.127.2
      repository_url: https://open-telemetry.github.io/opentelemetry-helm-charts
      namespace: default
      configuration_type: standalone
      configuration:
        values_base64: 
      parents:
      - name: kube-prometheus-stack
        kind: addon
    - name: open-webui
      chart_name: open-webui
      chart_version: 6.22.0
      repository_url: https://helm.openwebui.com
      namespace: default
      configuration_type: standalone
      configuration:
        values_base64: ICMgSGVsbSB2YWx1ZXMgZm9yIE9wZW4gV2ViVUksIGFwcGxpZWQgYnkgQW5rcmEvQXJnb0NELgojIFRoaXMgZmlsZSBpcyB0aGUgc2luZ2xlIHNvdXJjZSBvZiB0cnV0aCBmb3Igb3VyIG92ZXJyaWRlcy4KCiMgMS4gRW5hYmxlIHBpcGVsaW5lcyBmb3IgT3BlbkxJVCBpbnRlZ3JhdGlvbgpwaXBlbGluZXM6CiAgZW5hYmxlZDogdHJ1ZQogIGV4dHJhRW52VmFyczoKICAgICMgQWRkIHRoaXMgbGluZSB0byB0ZWxsIHRoZSBwaXBlbGluZSB3aGVyZSB0byBmb3J3YXJkIHJlcXVlc3RzCiAgICAtIG5hbWU6IE9MTEFNQV9CQVNFX1VSTAogICAgICB2YWx1ZTogImh0dHA6Ly9vcGVuLXdlYnVpLW9sbGFtYToxMTQzNCIKICAgIC0gbmFtZTogT1RFTF9FWFBPUlRFUl9PVExQX0VORFBPSU5UCiAgICAgIHZhbHVlOiAiaHR0cDovL290ZWwtY29sbGVjdG9yOjQzMTgiCiAgICAtIG5hbWU6IE9URUxfU0VSVklDRV9OQU1FCiAgICAgIHZhbHVlOiAib3Blbi13ZWJ1aS1waXBlbGluZXMiCiAgICAtIG5hbWU6IE9URUxfVFJBQ0VTX0VYUE9SVEVSCiAgICAgIHZhbHVlOiAib3RscF9odHRwIgogICAgLSBuYW1lOiBPVEVMX01FVFJJQ1NfRVhQT1JURVIKICAgICAgdmFsdWU6ICJvdGxwX2h0dHAiCgojIDIuIE1haW4gT3BlbiBXZWJVSSBjb25maWd1cmF0aW9uIHdpdGggUkFHIGludGVncmF0aW9uCmV4dHJhRW52VmFyczoKICAjIENvbm5lY3Rpb24gdG8gdGhlIHN0YW5kYWxvbmUgT2xsYW1hIGluc3RhbmNlCiAgLSBuYW1lOiBPTExBTUFfQkFTRV9VUkwKICAgIHZhbHVlOiAiaHR0cDovL29wZW4td2VidWktb2xsYW1hOjExNDM0IgoKICAjIERlZmF1bHQgQVBJIGtleSBmb3IgcGlwZWxpbmVzCiAgLSBuYW1lOiBPUEVOQUlfQVBJX0tFWQogICAgdmFsdWU6ICIwcDNuLXczYnUhIgogIAogICMgRW5hYmxlIGdlbmVyYWwgc2lnbnVwIGFuZCBkaXNhYmxlIGF1dGhlbnRpY2F0aW9uIGJ5cGFzcwogIC0gbmFtZTogRU5BQkxFX1NJR05VUAogICAgdmFsdWU6ICJ0cnVlIgogIC0gbmFtZTogV0VCVUlfQVVUSAogICAgdmFsdWU6ICJ0cnVlIgogIC0gbmFtZTogREVGQVVMVF9VU0VSX1JPTEUKICAgIHZhbHVlOiAicGVuZGluZyIKICAKICAjIE9wZW5MSVQvT1RFTCBjb25maWd1cmF0aW9uCiAgLSBuYW1lOiBPVEVMX0VYUE9SVEVSX09UTFBfRU5EUE9JTlQKICAgIHZhbHVlOiAiaHR0cDovL290ZWwtY29sbGVjdG9yOjQzMTgiCiAgLSBuYW1lOiBPVEVMX1NFUlZJQ0VfTkFNRQogICAgdmFsdWU6ICJvcGVuLXdlYnVpIgogIC0gbmFtZTogT1RFTF9UUkFDRVNfRVhQT1JURVIKICAgIHZhbHVlOiAib3RscF9odHRwIgogIC0gbmFtZTogT1RFTF9NRVRSSUNTX0VYUE9SVEVSCiAgICB2YWx1ZTogIm90bHBfaHR0cCIKCiAgIyBEYXRhYmFzZSBjb25uZWN0aW9uIGZyb20gc2VjcmV0CiAgLSBuYW1lOiBEQVRBQkFTRV9VUkwKICAgIHZhbHVlRnJvbToKICAgICAgc2VjcmV0S2V5UmVmOgogICAgICAgIG5hbWU6IGNucGctcmFnLWRiLWNvbm5lY3Rpb24KICAgICAgICBrZXk6IERBVEFCQVNFX1VSTAogIAogICMgUkFHIGNvbmZpZ3VyYXRpb24gd2l0aCB5b3VyIGV4aXN0aW5nIEtTZXJ2ZSBlbWJlZGRpbmcgaW5mcmFzdHJ1Y3R1cmUKICAtIG5hbWU6IFJBR19WRUNUT1JfREIKICAgIHZhbHVlOiAicGd2ZWN0b3IiCiAgLSBuYW1lOiBSQUdfRU1CRURESU5HX0VOR0lORQogICAgdmFsdWU6ICIiCiAgLSBuYW1lOiBSQUdfRU1CRURESU5HX0FQSV9VUkwKICAgIHZhbHVlOiAiaHR0cDovL2VtYmVkZGluZy1taW5pbG0tbDYtdjItdHJhbnNmb3JtZXIua3NlcnZlLnN2Yy5jbHVzdGVyLmxvY2FsL3YyL21vZGVscy9lbWJlZGRpbmctbWluaWxtLWw2LXYyL2luZmVyIgogIAogICMgQWRkaXRpb25hbCBPcGVuIFdlYlVJIG9wdGltaXphdGlvbnMKICAtIG5hbWU6IEpXVF9TRUNSRVQKICAgIHZhbHVlOiAiNjViNGY4NDcyZmQ1OGQ0YmZlN2I0NWVlOGIzYTk1MWRmOGVhYzhhN2VkODE5N2Y5NzZkNzFlZWJkYTIzYjdiZiIKICAtIG5hbWU6IEVOQUJMRV9SQUdfV0VCX1NFQVJDSAogICAgdmFsdWU6ICJ0cnVlIgogIC0gbmFtZTogUkFHX1dFQl9TRUFSQ0hfRU5HSU5FCiAgICB2YWx1ZTogImR1Y2tkdWNrZ28iCgojIDMuIENyZWF0ZSB0aGUgdGVsZW1ldHJ5IHBpcGVsaW5lIG1vZGVsIG9uIHN0YXJ0dXAKbGlmZWN5Y2xlSG9va3M6CiAgcG9zdFN0YXJ0OgogICAgZXhlYzoKICAgICAgY29tbWFuZDoKICAgICAgICAtIC9iaW4vc2gKICAgICAgICAtIC1jCiAgICAgICAgLSB8CiAgICAgICAgICBlY2hvICJDcmVhdGluZyB0ZWxlbWV0cnkgcGlwZWxpbmUgbW9kZWwuLi4iCiAgICAgICAgICBzbGVlcCAzMCAjIFdhaXQgZm9yIE9sbGFtYSB0byBiZSByZWFkeQogICAgICAgICAgY2F0IDw8RU9GID4gL3RtcC9Nb2RlbGZpbGUKICAgICAgICAgIEZST00gcXdlbjM6bGF0ZXN0CiAgICAgICAgICBBREFQVEVSIGh0dHA6Ly9vcGVuLXdlYnVpLXBpcGVsaW5lczo5MDk5CiAgICAgICAgICBFT0YKICAgICAgICAgIG9sbGFtYSBjcmVhdGUgcXdlbjM6cGlwZWxpbmUgLWYgL3RtcC9Nb2RlbGZpbGUKICAgICAgICAgIGVjaG8gIlBpcGVsaW5lIG1vZGVsIGNyZWF0ZWQuIgoKIyA0LiBTdGFuZGFyZCBpbWFnZSBjb25maWd1cmF0aW9uCmltYWdlOgogIHJlcG9zaXRvcnk6IGdoY3IuaW8vb3Blbi13ZWJ1aS9vcGVuLXdlYnVpCiAgdGFnOiAiIgogIHB1bGxQb2xpY3k6ICJJZk5vdFByZXNlbnQiCgojIDUuIFBlcnNpc3RlbnQgdm9sdW1lIGZvciBSQUcgZmlsZSBzdGFnaW5nCnBlcnNpc3RlbmNlOgogIGVuYWJsZWQ6IHRydWUKICBzaXplOiA1MEdpCgojIC0tLSBSZXN0IG9mIGNvbmZpZ3VyYXRpb24gcmVtYWlucyB0aGUgc2FtZSAtLS0KbmFtZU92ZXJyaWRlOiAiIgpuYW1lc3BhY2VPdmVycmlkZTogIiIKCnRpa2E6CiAgZW5hYmxlZDogZmFsc2UKCm9sbGFtYVVybHNGcm9tRXh0cmFFbnY6IGZhbHNlCgp3ZWJzb2NrZXQ6CiAgZW5hYmxlZDogZmFsc2UKICBtYW5hZ2VyOiByZWRpcwogIHVybDogcmVkaXM6Ly9vcGVuLXdlYnVpLXJlZGlzOjYzNzkvMAogIG5vZGVTZWxlY3Rvcjoge30KICByZWRpczoKICAgIGVuYWJsZWQ6IHRydWUKICAgIG5hbWU6IG9wZW4td2VidWktcmVkaXMKICAgIGxhYmVsczoge30KICAgIGFubm90YXRpb25zOiB7fQogICAgcG9kczoKICAgICAgbGFiZWxzOiB7fQogICAgICBhbm5vdGF0aW9uczoge30KICAgIGltYWdlOgogICAgICByZXBvc2l0b3J5OiByZWRpcwogICAgICB0YWc6IDcuNC4yLWFscGluZTMuMjEKICAgICAgcHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICBjb21tYW5kOiBbXQogICAgYXJnczogW10KICAgIHJlc291cmNlczoge30KICAgIHNlcnZpY2U6CiAgICAgIGNvbnRhaW5lclBvcnQ6IDYzNzkKICAgICAgdHlwZTogQ2x1c3RlcklQCiAgICAgIGxhYmVsczoge30KICAgICAgYW5ub3RhdGlvbnM6IHt9CiAgICAgIHBvcnQ6IDYzNzkKICAgICAgbm9kZVBvcnQ6ICIiCiAgICB0b2xlcmF0aW9uczogW10KICAgIGFmZmluaXR5OiB7fQogICAgc2VjdXJpdHlDb250ZXh0OiB7fQoKcmVkaXMtY2x1c3RlcjoKICBlbmFibGVkOiBmYWxzZQogIGZ1bGxuYW1lT3ZlcnJpZGU6IG9wZW4td2VidWktcmVkaXMKICBhdXRoOgogICAgZW5hYmxlZDogZmFsc2UKICByZXBsaWNhOgogICAgcmVwbGljYUNvdW50OiAzCgpjbHVzdGVyRG9tYWluOiBjbHVzdGVyLmxvY2FsCmFubm90YXRpb25zOiB7fQpwb2RBbm5vdGF0aW9uczoge30KcG9kTGFiZWxzOiB7fQpyZXBsaWNhQ291bnQ6IDEKc3RyYXRlZ3k6IHt9CgpzZXJ2aWNlQWNjb3VudDoKICBlbmFibGU6IHRydWUKICBuYW1lOiAiIgogIGFubm90YXRpb25zOiB7fQogIGF1dG9tb3VudFNlcnZpY2VBY2NvdW50VG9rZW46IGZhbHNlCgppbWFnZVB1bGxTZWNyZXRzOiBbXQpsaXZlbmVzc1Byb2JlOiB7fQpyZWFkaW5lc3NQcm9iZToge30Kc3RhcnR1cFByb2JlOiB7fQpyZXNvdXJjZXM6IHt9CmNvcHlBcHBEYXRhOgogIHJlc291cmNlczoge30KCm1hbmFnZWRDZXJ0aWZpY2F0ZToKICBlbmFibGVkOiBmYWxzZQogIG5hbWU6ICJteWRvbWFpbi1jaGF0LWNlcnQiCiAgZG9tYWluczoKICAgIC0gY2hhdC5leGFtcGxlLmNvbQoKaW5ncmVzczoKICBlbmFibGVkOiBmYWxzZQogIGNsYXNzOiAiIgogIGFubm90YXRpb25zOiB7fQogIGhvc3Q6ICJjaGF0LmV4YW1wbGUuY29tIgogIGFkZGl0aW9uYWxIb3N0czogW10KICB0bHM6IGZhbHNlCiAgZXhpc3RpbmdTZWNyZXQ6ICIiCiAgZXh0cmFMYWJlbHM6IHt9Cgpub2RlU2VsZWN0b3I6IHt9CnRvbGVyYXRpb25zOiBbXQphZmZpbml0eToge30KdG9wb2xvZ3lTcHJlYWRDb25zdHJhaW50czogW10KaG9zdEFsaWFzZXM6IFtdCgpzZXJ2aWNlOgogIHR5cGU6IENsdXN0ZXJJUAogIGFubm90YXRpb25zOiB7fQogIHBvcnQ6IDgwCiAgY29udGFpbmVyUG9ydDogODA4MAogIG5vZGVQb3J0OiAiIgogIGxhYmVsczoge30KICBsb2FkQmFsYW5jZXJDbGFzczogIiIKCmVuYWJsZU9wZW5haUFwaTogdHJ1ZQpvcGVuYWlCYXNlQXBpVXJsOiAiaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSIKb3BlbmFpQmFzZUFwaVVybHM6IFtdCmNvbW1vbkVudlZhcnM6IFtdCnJ1bnRpbWVDbGFzc05hbWU6ICIiCnBvZFNlY3VyaXR5Q29udGV4dDoge30KY29udGFpbmVyU2VjdXJpdHlDb250ZXh0OiB7fQoKc3NvOgogIGVuYWJsZWQ6IGZhbHNlCiAgZW5hYmxlU2lnbnVwOiB0cnVlCiAgbWVyZ2VBY2NvdW50c0J5RW1haWw6IGZhbHNlCiAgZW5hYmxlUm9sZU1hbmFnZW1lbnQ6IGZhbHNlCiAgZW5hYmxlR3JvdXBNYW5hZ2VtZW50OiBmYWxzZQogIGdvb2dsZToKICAgIGVuYWJsZWQ6IGZhbHNlCiAgICBjbGllbnRJZDogIiIKICAgIGNsaWVudFNlY3JldDogIiIKICAgIGNsaWVudEV4aXN0aW5nU2VjcmV0OiAiIgogICAgY2xpZW50RXhpc3RpbmdTZWNyZXRLZXk6ICIiCiAgbWljcm9zb2Z0OgogICAgZW5hYmxlZDogZmFsc2UKICAgIGNsaWVudElkOiAiIgogICAgY2xpZW50U2VjcmV0OiAiIgogICAgY2xpZW50RXhpc3RpbmdTZWNyZXQ6ICIiCiAgICBjbGllbnRFeGlzdGluZ1NlY3JldEtleTogIiIKICAgIHRlbmFudElkOiAiIgogIGdpdGh1YjoKICAgIGVuYWJsZWQ6IGZhbHNlCiAgICBjbGllbnRJZDogIiIKICAgIGNsaWVudFNlY3JldDogIiIKICAgIGNsaWVudEV4aXN0aW5nU2VjcmV0OiAiIgogICAgY2xpZW50RXhpc3RpbmdTZWNyZXRLZXk6ICIiCiAgb2lkYzoKICAgIGVuYWJsZWQ6IGZhbHNlCiAgICBjbGllbnRJZDogIiIKICAgIGNsaWVudFNlY3JldDogIiIKICAgIGNsaWVudEV4aXN0aW5nU2VjcmV0OiAiIgogICAgY2xpZW50RXhpc3RpbmdTZWNyZXRLZXk6ICIiCiAgICBwcm92aWRlclVybDogIiIKICAgIHByb3ZpZGVyTmFtZTogIlNTTyIKICAgIHNjb3BlczogIm9wZW5pZCBlbWFpbCBwcm9maWxlIgogIHJvbGVNYW5hZ2VtZW50OgogICAgcm9sZXNDbGFpbTogInJvbGVzIgogICAgYWxsb3dlZFJvbGVzOiAiIgogICAgYWRtaW5Sb2xlczogIiIKICBncm91cE1hbmFnZW1lbnQ6CiAgICBncm91cHNDbGFpbTogImdyb3VwcyIKICB0cnVzdGVkSGVhZGVyOgogICAgZW5hYmxlZDogZmFsc2UKICAgIGVtYWlsSGVhZGVyOiAiIgogICAgbmFtZUhlYWRlcjogIiIKCmV4dHJhUmVzb3VyY2VzOiBbXQpkYXRhYmFzZVVybDogIiIKCnBvc3RncmVzcWw6CiAgZW5hYmxlZDogZmFsc2UKICBmdWxsbmFtZU92ZXJyaWRlOiBvcGVuLXdlYnVpLXBvc3RncmVzCiAgYXJjaGl0ZWN0dXJlOiBzdGFuZGFsb25lCiAgYXV0aDoKICAgIGRhdGFiYXNlOiBvcGVuLXdlYnVpCiAgICBwb3N0Z3Jlc1Bhc3N3b3JkOiAwcDNuLXczYnUhCiAgICB1c2VybmFtZTogb3Blbi13ZWJ1aQogICAgcGFzc3dvcmQ6IDBwM24tdzNidSEKICBwcmltYXJ5OgogICAgcGVyc2lzdGVuY2U6CiAgICAgIHNpemU6IDFHaQogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBtZW1vcnk6IDI1Nk1pCiAgICAgICAgY3B1OiAyNTBtCiAgICAgIGxpbWl0czoKICAgICAgICBtZW1vcnk6IDUxMk1pCiAgICAgICAgY3B1OiA1MDBtCgpsb2dnaW5nOgogIGxldmVsOiAiIgogIGNvbXBvbmVudHM6CiAgICBhdWRpbzogIiIKICAgIGNvbWZ5dWk6ICIiCiAgICBjb25maWc6ICIiCiAgICBkYjogIiIKICAgIGltYWdlczogIiIKICAgIG1haW46ICIiCiAgICBtb2RlbHM6ICIiCiAgICBvbGxhbWE6ICIiCiAgICBvcGVuYWk6ICIiCiAgICByYWc6ICIiCiAgICB3ZWJob29rOiAiIgo=
      parents:
      - name: open-webui-db-secret
        kind: manifest
    - name: cert-manager
      chart_name: cert-manager
      chart_version: v1.18.2
      repository_url: https://charts.jetstack.io
      namespace: default
      configuration_type: standalone
      configuration:
        values_base64: 
      parents: []
    - name: kube-prometheus-stack
      chart_name: kube-prometheus-stack
      chart_version: 75.7.0
      repository_url: https://prometheus-community.github.io/helm-charts
      namespace: default
      configuration_type: standalone
      configuration:
        values_base64: LS0tCm5hbWVPdmVycmlkZTogIiIKbmFtZXNwYWNlT3ZlcnJpZGU6ICIiCmt1YmVUYXJnZXRWZXJzaW9uT3ZlcnJpZGU6ICIiCmt1YmVWZXJzaW9uT3ZlcnJpZGU6ICIiCmZ1bGxuYW1lT3ZlcnJpZGU6ICIiCmNvbW1vbkxhYmVsczoge30KY3JkczoKICBlbmFibGVkOiB0cnVlCiAgdXBncmFkZUpvYjoKICAgIGVuYWJsZWQ6IGZhbHNlCiAgICBmb3JjZUNvbmZsaWN0czogZmFsc2UKICAgIGltYWdlOgogICAgICBidXN5Ym94OgogICAgICAgIHJlZ2lzdHJ5OiBkb2NrZXIuaW8KICAgICAgICByZXBvc2l0b3J5OiBidXN5Ym94CiAgICAgICAgdGFnOiBsYXRlc3QKICAgICAgICBzaGE6ICIiCiAgICAgICAgcHVsbFBvbGljeTogSWZOb3RQcmVzZW50CiAgICAgIGt1YmVjdGw6CiAgICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5Lms4cy5pbwogICAgICAgIHJlcG9zaXRvcnk6IGt1YmVjdGwKICAgICAgICB0YWc6ICIiCiAgICAgICAgc2hhOiAiIgogICAgICAgIHB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgZW52OiB7fQogICAgcmVzb3VyY2VzOiB7fQogICAgZXh0cmFWb2x1bWVzOiBbXQogICAgZXh0cmFWb2x1bWVNb3VudHM6IFtdCiAgICBub2RlU2VsZWN0b3I6IHt9CiAgICBhZmZpbml0eToge30KICAgIHRvbGVyYXRpb25zOiBbXQogICAgdG9wb2xvZ3lTcHJlYWRDb25zdHJhaW50czogW10KICAgIGxhYmVsczoge30KICAgIGFubm90YXRpb25zOiB7fQogICAgcG9kTGFiZWxzOiB7fQogICAgcG9kQW5ub3RhdGlvbnM6IHt9CiAgICBzZXJ2aWNlQWNjb3VudDoKICAgICAgY3JlYXRlOiB0cnVlCiAgICAgIG5hbWU6ICIiCiAgICAgIGFubm90YXRpb25zOiB7fQogICAgICBsYWJlbHM6IHt9CiAgICAgIGF1dG9tb3VudFNlcnZpY2VBY2NvdW50VG9rZW46IHRydWUKICAgIGNvbnRhaW5lclNlY3VyaXR5Q29udGV4dDoKICAgICAgYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uOiBmYWxzZQogICAgICByZWFkT25seVJvb3RGaWxlc3lzdGVtOiB0cnVlCiAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICBkcm9wOgogICAgICAgICAgLSBBTEwKICAgIHBvZFNlY3VyaXR5Q29udGV4dDoKICAgICAgZnNHcm91cDogNjU1MzQKICAgICAgcnVuQXNHcm91cDogNjU1MzQKICAgICAgcnVuQXNOb25Sb290OiB0cnVlCiAgICAgIHJ1bkFzVXNlcjogNjU1MzQKICAgICAgc2VjY29tcFByb2ZpbGU6CiAgICAgICAgdHlwZTogUnVudGltZURlZmF1bHQKY3VzdG9tUnVsZXM6IHt9CmRlZmF1bHRSdWxlczoKICBjcmVhdGU6IHRydWUKICBydWxlczoKICAgIGFsZXJ0bWFuYWdlcjogdHJ1ZQogICAgZXRjZDogdHJ1ZQogICAgY29uZmlnUmVsb2FkZXJzOiB0cnVlCiAgICBnZW5lcmFsOiB0cnVlCiAgICBrOHNDb250YWluZXJDcHVVc2FnZVNlY29uZHNUb3RhbDogdHJ1ZQogICAgazhzQ29udGFpbmVyTWVtb3J5Q2FjaGU6IHRydWUKICAgIGs4c0NvbnRhaW5lck1lbW9yeVJzczogdHJ1ZQogICAgazhzQ29udGFpbmVyTWVtb3J5U3dhcDogdHJ1ZQogICAgazhzQ29udGFpbmVyUmVzb3VyY2U6IHRydWUKICAgIGs4c0NvbnRhaW5lck1lbW9yeVdvcmtpbmdTZXRCeXRlczogdHJ1ZQogICAgazhzUG9kT3duZXI6IHRydWUKICAgIGt1YmVBcGlzZXJ2ZXJBdmFpbGFiaWxpdHk6IHRydWUKICAgIGt1YmVBcGlzZXJ2ZXJCdXJucmF0ZTogdHJ1ZQogICAga3ViZUFwaXNlcnZlckhpc3RvZ3JhbTogdHJ1ZQogICAga3ViZUFwaXNlcnZlclNsb3M6IHRydWUKICAgIGt1YmVDb250cm9sbGVyTWFuYWdlcjogdHJ1ZQogICAga3ViZWxldDogdHJ1ZQogICAga3ViZVByb3h5OiB0cnVlCiAgICBrdWJlUHJvbWV0aGV1c0dlbmVyYWw6IHRydWUKICAgIGt1YmVQcm9tZXRoZXVzTm9kZVJlY29yZGluZzogdHJ1ZQogICAga3ViZXJuZXRlc0FwcHM6IHRydWUKICAgIGt1YmVybmV0ZXNSZXNvdXJjZXM6IHRydWUKICAgIGt1YmVybmV0ZXNTdG9yYWdlOiB0cnVlCiAgICBrdWJlcm5ldGVzU3lzdGVtOiB0cnVlCiAgICBrdWJlU2NoZWR1bGVyQWxlcnRpbmc6IHRydWUKICAgIGt1YmVTY2hlZHVsZXJSZWNvcmRpbmc6IHRydWUKICAgIGt1YmVTdGF0ZU1ldHJpY3M6IHRydWUKICAgIG5ldHdvcms6IHRydWUKICAgIG5vZGU6IHRydWUKICAgIG5vZGVFeHBvcnRlckFsZXJ0aW5nOiB0cnVlCiAgICBub2RlRXhwb3J0ZXJSZWNvcmRpbmc6IHRydWUKICAgIHByb21ldGhldXM6IHRydWUKICAgIHByb21ldGhldXNPcGVyYXRvcjogdHJ1ZQogICAgd2luZG93czogdHJ1ZQogIGFwcE5hbWVzcGFjZXNUYXJnZXQ6IC4qCiAga2VlcEZpcmluZ0ZvcjogIiIKICBsYWJlbHM6IHt9CiAgYW5ub3RhdGlvbnM6IHt9CiAgYWRkaXRpb25hbFJ1bGVMYWJlbHM6IHt9CiAgYWRkaXRpb25hbFJ1bGVBbm5vdGF0aW9uczoge30KICBhZGRpdGlvbmFsUnVsZUdyb3VwTGFiZWxzOgogICAgYWxlcnRtYW5hZ2VyOiB7fQogICAgZXRjZDoge30KICAgIGNvbmZpZ1JlbG9hZGVyczoge30KICAgIGdlbmVyYWw6IHt9CiAgICBrOHNDb250YWluZXJDcHVVc2FnZVNlY29uZHNUb3RhbDoge30KICAgIGs4c0NvbnRhaW5lck1lbW9yeUNhY2hlOiB7fQogICAgazhzQ29udGFpbmVyTWVtb3J5UnNzOiB7fQogICAgazhzQ29udGFpbmVyTWVtb3J5U3dhcDoge30KICAgIGs4c0NvbnRhaW5lclJlc291cmNlOiB7fQogICAgazhzUG9kT3duZXI6IHt9CiAgICBrdWJlQXBpc2VydmVyQXZhaWxhYmlsaXR5OiB7fQogICAga3ViZUFwaXNlcnZlckJ1cm5yYXRlOiB7fQogICAga3ViZUFwaXNlcnZlckhpc3RvZ3JhbToge30KICAgIGt1YmVBcGlzZXJ2ZXJTbG9zOiB7fQogICAga3ViZUNvbnRyb2xsZXJNYW5hZ2VyOiB7fQogICAga3ViZWxldDoge30KICAgIGt1YmVQcm94eToge30KICAgIGt1YmVQcm9tZXRoZXVzR2VuZXJhbDoge30KICAgIGt1YmVQcm9tZXRoZXVzTm9kZVJlY29yZGluZzoge30KICAgIGt1YmVybmV0ZXNBcHBzOiB7fQogICAga3ViZXJuZXRlc1Jlc291cmNlczoge30KICAgIGt1YmVybmV0ZXNTdG9yYWdlOiB7fQogICAga3ViZXJuZXRlc1N5c3RlbToge30KICAgIGt1YmVTY2hlZHVsZXJBbGVydGluZzoge30KICAgIGt1YmVTY2hlZHVsZXJSZWNvcmRpbmc6IHt9CiAgICBrdWJlU3RhdGVNZXRyaWNzOiB7fQogICAgbmV0d29yazoge30KICAgIG5vZGU6IHt9CiAgICBub2RlRXhwb3J0ZXJBbGVydGluZzoge30KICAgIG5vZGVFeHBvcnRlclJlY29yZGluZzoge30KICAgIHByb21ldGhldXM6IHt9CiAgICBwcm9tZXRoZXVzT3BlcmF0b3I6IHt9CiAgYWRkaXRpb25hbFJ1bGVHcm91cEFubm90YXRpb25zOgogICAgYWxlcnRtYW5hZ2VyOiB7fQogICAgZXRjZDoge30KICAgIGNvbmZpZ1JlbG9hZGVyczoge30KICAgIGdlbmVyYWw6IHt9CiAgICBrOHNDb250YWluZXJDcHVVc2FnZVNlY29uZHNUb3RhbDoge30KICAgIGs4c0NvbnRhaW5lck1lbW9yeUNhY2hlOiB7fQogICAgazhzQ29udGFpbmVyTWVtb3J5UnNzOiB7fQogICAgazhzQ29udGFpbmVyTWVtb3J5U3dhcDoge30KICAgIGs4c0NvbnRhaW5lclJlc291cmNlOiB7fQogICAgazhzUG9kT3duZXI6IHt9CiAgICBrdWJlQXBpc2VydmVyQXZhaWxhYmlsaXR5OiB7fQogICAga3ViZUFwaXNlcnZlckJ1cm5yYXRlOiB7fQogICAga3ViZUFwaXNlcnZlckhpc3RvZ3JhbToge30KICAgIGt1YmVBcGlzZXJ2ZXJTbG9zOiB7fQogICAga3ViZUNvbnRyb2xsZXJNYW5hZ2VyOiB7fQogICAga3ViZWxldDoge30KICAgIGt1YmVQcm94eToge30KICAgIGt1YmVQcm9tZXRoZXVzR2VuZXJhbDoge30KICAgIGt1YmVQcm9tZXRoZXVzTm9kZVJlY29yZGluZzoge30KICAgIGt1YmVybmV0ZXNBcHBzOiB7fQogICAga3ViZXJuZXRlc1Jlc291cmNlczoge30KICAgIGt1YmVybmV0ZXNTdG9yYWdlOiB7fQogICAga3ViZXJuZXRlc1N5c3RlbToge30KICAgIGt1YmVTY2hlZHVsZXJBbGVydGluZzoge30KICAgIGt1YmVTY2hlZHVsZXJSZWNvcmRpbmc6IHt9CiAgICBrdWJlU3RhdGVNZXRyaWNzOiB7fQogICAgbmV0d29yazoge30KICAgIG5vZGU6IHt9CiAgICBub2RlRXhwb3J0ZXJBbGVydGluZzoge30KICAgIG5vZGVFeHBvcnRlclJlY29yZGluZzoge30KICAgIHByb21ldGhldXM6IHt9CiAgICBwcm9tZXRoZXVzT3BlcmF0b3I6IHt9CiAgYWRkaXRpb25hbEFnZ3JlZ2F0aW9uTGFiZWxzOiBbXQogIHJ1bmJvb2tVcmw6IGh0dHBzOi8vcnVuYm9va3MucHJvbWV0aGV1cy1vcGVyYXRvci5kZXYvcnVuYm9va3MKICBub2RlOgogICAgZnNTZWxlY3RvcjogZnN0eXBlIT0iIgogIGRpc2FibGVkOiB7fQphZGRpdGlvbmFsUHJvbWV0aGV1c1J1bGVzTWFwOiB7fQpnbG9iYWw6CiAgcmJhYzoKICAgIGNyZWF0ZTogdHJ1ZQogICAgY3JlYXRlQWdncmVnYXRlQ2x1c3RlclJvbGVzOiBmYWxzZQogICAgcHNwRW5hYmxlZDogZmFsc2UKICAgIHBzcEFubm90YXRpb25zOiB7fQogIGltYWdlUmVnaXN0cnk6ICIiCiAgaW1hZ2VQdWxsU2VjcmV0czogW10Kd2luZG93c01vbml0b3Jpbmc6CiAgZW5hYmxlZDogZmFsc2UKcHJvbWV0aGV1cy13aW5kb3dzLWV4cG9ydGVyOgogIHByb21ldGhldXM6CiAgICBtb25pdG9yOgogICAgICBlbmFibGVkOiB0cnVlCiAgICAgIGpvYkxhYmVsOiBqb2JMYWJlbAogIHJlbGVhc2VMYWJlbDogdHJ1ZQogIHBvZExhYmVsczoKICAgIGpvYkxhYmVsOiB3aW5kb3dzLWV4cG9ydGVyCiAgY29uZmlnOiB8LQogICAgY29sbGVjdG9yczoKICAgICAgZW5hYmxlZDogJ1tkZWZhdWx0c10sbWVtb3J5LGNvbnRhaW5lcicKYWxlcnRtYW5hZ2VyOgogIGVuYWJsZWQ6IHRydWUKICBuYW1lc3BhY2VPdmVycmlkZTogIiIKICBhbm5vdGF0aW9uczoge30KICBhcGlWZXJzaW9uOiB2MgogIGVuYWJsZUZlYXR1cmVzOiBbXQogIGZvcmNlRGVwbG95RGFzaGJvYXJkczogZmFsc2UKICBuZXR3b3JrUG9saWN5OgogICAgZW5hYmxlZDogZmFsc2UKICAgIHBvbGljeVR5cGVzOgogICAgICAtIEluZ3Jlc3MKICAgIGdhdGV3YXk6CiAgICAgIG5hbWVzcGFjZTogIiIKICAgICAgcG9kTGFiZWxzOiB7fQogICAgYWRkaXRpb25hbEluZ3Jlc3M6IFtdCiAgICBlZ3Jlc3M6CiAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICAgIHJ1bGVzOiBbXQogICAgZW5hYmxlQ2x1c3RlclJ1bGVzOiB0cnVlCiAgICBtb25pdG9yaW5nUnVsZXM6CiAgICAgIHByb21ldGhldXM6IHRydWUKICAgICAgY29uZmlnUmVsb2FkZXI6IHRydWUKICBzZXJ2aWNlQWNjb3VudDoKICAgIGNyZWF0ZTogdHJ1ZQogICAgbmFtZTogIiIKICAgIGFubm90YXRpb25zOiB7fQogICAgYXV0b21vdW50U2VydmljZUFjY291bnRUb2tlbjogdHJ1ZQogIHBvZERpc3J1cHRpb25CdWRnZXQ6CiAgICBlbmFibGVkOiBmYWxzZQogICAgbWluQXZhaWxhYmxlOiAxCiAgICB1bmhlYWx0aHlQb2RFdmljdGlvblBvbGljeTogQWx3YXlzQWxsb3cKICBjb25maWc6CiAgICBnbG9iYWw6CiAgICAgIHJlc29sdmVfdGltZW91dDogNW0KICAgIGluaGliaXRfcnVsZXM6CiAgICAgIC0gc291cmNlX21hdGNoZXJzOgogICAgICAgICAgLSBzZXZlcml0eSA9IGNyaXRpY2FsCiAgICAgICAgdGFyZ2V0X21hdGNoZXJzOgogICAgICAgICAgLSBzZXZlcml0eSA9fiB3YXJuaW5nfGluZm8KICAgICAgICBlcXVhbDoKICAgICAgICAgIC0gbmFtZXNwYWNlCiAgICAgICAgICAtIGFsZXJ0bmFtZQogICAgICAtIHNvdXJjZV9tYXRjaGVyczoKICAgICAgICAgIC0gc2V2ZXJpdHkgPSB3YXJuaW5nCiAgICAgICAgdGFyZ2V0X21hdGNoZXJzOgogICAgICAgICAgLSBzZXZlcml0eSA9IGluZm8KICAgICAgICBlcXVhbDoKICAgICAgICAgIC0gbmFtZXNwYWNlCiAgICAgICAgICAtIGFsZXJ0bmFtZQogICAgICAtIHNvdXJjZV9tYXRjaGVyczoKICAgICAgICAgIC0gYWxlcnRuYW1lID0gSW5mb0luaGliaXRvcgogICAgICAgIHRhcmdldF9tYXRjaGVyczoKICAgICAgICAgIC0gc2V2ZXJpdHkgPSBpbmZvCiAgICAgICAgZXF1YWw6CiAgICAgICAgICAtIG5hbWVzcGFjZQogICAgICAtIHRhcmdldF9tYXRjaGVyczoKICAgICAgICAgIC0gYWxlcnRuYW1lID0gSW5mb0luaGliaXRvcgogICAgcm91dGU6CiAgICAgIGdyb3VwX2J5OgogICAgICAgIC0gbmFtZXNwYWNlCiAgICAgIGdyb3VwX3dhaXQ6IDMwcwogICAgICBncm91cF9pbnRlcnZhbDogNW0KICAgICAgcmVwZWF0X2ludGVydmFsOiAxMmgKICAgICAgcmVjZWl2ZXI6ICJudWxsIgogICAgICByb3V0ZXM6CiAgICAgICAgLSByZWNlaXZlcjogIm51bGwiCiAgICAgICAgICBtYXRjaGVyczoKICAgICAgICAgICAgLSBhbGVydG5hbWUgPSAiV2F0Y2hkb2ciCiAgICByZWNlaXZlcnM6CiAgICAgIC0gbmFtZTogIm51bGwiCiAgICB0ZW1wbGF0ZXM6CiAgICAgIC0gL2V0Yy9hbGVydG1hbmFnZXIvY29uZmlnLyoudG1wbAogIHN0cmluZ0NvbmZpZzogIiIKICB0cGxDb25maWc6IGZhbHNlCiAgdGVtcGxhdGVGaWxlczoge30KICBpbmdyZXNzOgogICAgZW5hYmxlZDogZmFsc2UKICAgIGFubm90YXRpb25zOiB7fQogICAgbGFiZWxzOiB7fQogICAgaG9zdHM6IFtdCiAgICBwYXRoczogW10KICAgIHRsczogW10KICByb3V0ZToKICAgIG1haW46CiAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICAgIGFwaVZlcnNpb246IGdhdGV3YXkubmV0d29ya2luZy5rOHMuaW8vdjEKICAgICAga2luZDogSFRUUFJvdXRlCiAgICAgIGFubm90YXRpb25zOiB7fQogICAgICBsYWJlbHM6IHt9CiAgICAgIGhvc3RuYW1lczogW10KICAgICAgcGFyZW50UmVmczogW10KICAgICAgaHR0cHNSZWRpcmVjdDogZmFsc2UKICAgICAgbWF0Y2hlczoKICAgICAgICAtIHBhdGg6CiAgICAgICAgICAgIHR5cGU6IFBhdGhQcmVmaXgKICAgICAgICAgICAgdmFsdWU6IC8KICAgICAgZmlsdGVyczogW10KICAgICAgYWRkaXRpb25hbFJ1bGVzOiBbXQogIHNlY3JldDoKICAgIGFubm90YXRpb25zOiB7fQogIGluZ3Jlc3NQZXJSZXBsaWNhOgogICAgZW5hYmxlZDogZmFsc2UKICAgIGFubm90YXRpb25zOiB7fQogICAgbGFiZWxzOiB7fQogICAgaG9zdFByZWZpeDogIiIKICAgIGhvc3REb21haW46ICIiCiAgICBwYXRoczogW10KICAgIHRsc1NlY3JldE5hbWU6ICIiCiAgICB0bHNTZWNyZXRQZXJSZXBsaWNhOgogICAgICBlbmFibGVkOiBmYWxzZQogICAgICBwcmVmaXg6IGFsZXJ0bWFuYWdlcgogIHNlcnZpY2U6CiAgICBlbmFibGVkOiB0cnVlCiAgICBhbm5vdGF0aW9uczoge30KICAgIGxhYmVsczoge30KICAgIGNsdXN0ZXJJUDogIiIKICAgIGlwRHVhbFN0YWNrOgogICAgICBlbmFibGVkOiBmYWxzZQogICAgICBpcEZhbWlsaWVzOgogICAgICAgIC0gSVB2NgogICAgICAgIC0gSVB2NAogICAgICBpcEZhbWlseVBvbGljeTogUHJlZmVyRHVhbFN0YWNrCiAgICBwb3J0OiA5MDkzCiAgICB0YXJnZXRQb3J0OiA5MDkzCiAgICBub2RlUG9ydDogMzA5MDMKICAgIGFkZGl0aW9uYWxQb3J0czogW10KICAgIGV4dGVybmFsSVBzOiBbXQogICAgbG9hZEJhbGFuY2VySVA6ICIiCiAgICBsb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXM6IFtdCiAgICBleHRlcm5hbFRyYWZmaWNQb2xpY3k6IENsdXN0ZXIKICAgIHNlc3Npb25BZmZpbml0eTogTm9uZQogICAgc2Vzc2lvbkFmZmluaXR5Q29uZmlnOgogICAgICBjbGllbnRJUDoKICAgICAgICB0aW1lb3V0U2Vjb25kczogMTA4MDAKICAgIHR5cGU6IENsdXN0ZXJJUAogIHNlcnZpY2VQZXJSZXBsaWNhOgogICAgZW5hYmxlZDogZmFsc2UKICAgIGFubm90YXRpb25zOiB7fQogICAgcG9ydDogOTA5MwogICAgdGFyZ2V0UG9ydDogOTA5MwogICAgbm9kZVBvcnQ6IDMwOTA0CiAgICBsb2FkQmFsYW5jZXJTb3VyY2VSYW5nZXM6IFtdCiAgICBleHRlcm5hbFRyYWZmaWNQb2xpY3k6IENsdXN0ZXIKICAgIHR5cGU6IENsdXN0ZXJJUAogIHNlcnZpY2VNb25pdG9yOgogICAgc2VsZk1vbml0b3I6IHRydWUKICAgIGludGVydmFsOiAiIgogICAgYWRkaXRpb25hbExhYmVsczoge30KICAgIHNhbXBsZUxpbWl0OiAwCiAgICB0YXJnZXRMaW1pdDogMAogICAgbGFiZWxMaW1pdDogMAogICAgbGFiZWxOYW1lTGVuZ3RoTGltaXQ6IDAKICBhbGVydG1hbmFnZXJTcGVjOgogICAgc3RvcmFnZToKICAgICAgdm9sdW1lQ2xhaW1UZW1wbGF0ZToKICAgICAgICBzcGVjOgogICAgICAgICAgYWNjZXNzTW9kZXM6CiAgICAgICAgICAgIC0gUmVhZFdyaXRlT25jZQogICAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgICByZXF1ZXN0czoKICAgICAgICAgICAgICBzdG9yYWdlOiAxMEdpCnByb21ldGhldXM6CiAgaW5ncmVzczoKICAgIGVuYWJsZWQ6IGZhbHNlCiAgcHJvbWV0aGV1c1NwZWM6CiAgICBzdG9yYWdlU3BlYzoKICAgICAgdm9sdW1lQ2xhaW1UZW1wbGF0ZToKICAgICAgICBzcGVjOgogICAgICAgICAgYWNjZXNzTW9kZXM6CiAgICAgICAgICAgIC0gUmVhZFdyaXRlT25jZQogICAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgICByZXF1ZXN0czoKICAgICAgICAgICAgICBzdG9yYWdlOiA1MEdpCiAgICByZXRlbnRpb246IDMwZAogICAgcmV0ZW50aW9uU2l6ZTogIiI=
      parents: []
    - name: ingress-nginx
      chart_name: ingress-nginx
      chart_version: 4.12.3
      repository_url: https://kubernetes.github.io/ingress-nginx
      namespace: ingress-nginx
      configuration_type: standalone
      configuration:
        values_base64: 
      parents: []
    - name: knative-operator
      chart_name: knative-operator
      chart_version: v1.18.1
      repository_url: https://knative.github.io/operator
      namespace: knative-operator
      configuration_type: standalone
      configuration:
        values_base64: null
      parents: []
    - name: kserve-crd
      chart_name: kserve-crd
      chart_version: v0.15.2
      repository_url: oci://ghcr.io/kserve/charts/kserve-crd
      namespace: kserve-crd
      configuration_type: standalone
      configuration:
        values_base64: null
      parents:
      - name: knative-serving-cr
        kind: manifest
    - name: kserve
      chart_name: kserve
      chart_version: v0.15.2
      repository_url: oci://ghcr.io/kserve/charts/kserve
      namespace: kserve
      configuration_type: standalone
      configuration:
        values_base64: null
      parents:
      - name: kserve-crd
        kind: addon
    - name: jupyterhub
      chart_name: jupyterhub
      chart_version: 4.2.1-0.dev.git.7042.h294a43d1
      repository_url: https://jupyterhub.github.io/helm-chart
      namespace: jupyterhub
      configuration_type: standalone
      configuration:
        values_base64: 
      parents:
      - name: cloudnative-pg
        kind: addon
